---
import { getCollection } from "astro:content";
import Base from "@/layouts/Base.astro";
import { fetchReviews } from "@/utils/fetchReviews";
import { getTimeAgo } from "@/utils/formatters";

const pageData = (await getCollection("reviewsPage"))[0];
const reviews = await fetchReviews();
---

<Base title={pageData.data.title} description={pageData.data.description}>
    <main class="container mx-auto mt-[88px] px-6">
        <section class="mx-auto mt-24 flex max-w-6xl flex-col">
            <div class="mb-8 text-center">
                <p class="mb-2 text-xl font-medium text-neutral-400">{pageData.data.secondary_heading}</p>
                <h2 class="mb-4 font-mono text-6xl font-semibold">{pageData.data.heading}</h2>
                <div class="text-neutral-400" set:html={pageData.rendered?.html} />
            </div>

            <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
                {
                    reviews?.map((review) => (
                        <div class="flex flex-col space-y-3 bg-neutral-900 p-6">
                            <p class="grow">{review.text}</p>
                            <hr class="border border-neutral-800" />
                            <div class="flex items-center justify-between">
                                <div>
                                    <p>{review.author}</p>
                                    <p class="text-sm text-neutral-400" data-datetime={review.datetime}>
                                        {getTimeAgo(review.datetime)}
                                    </p>
                                </div>
                                <div class="flex">
                                    {Array.from({ length: review.rating }).map((_) => (
                                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 22 20" class="mr-1 h-4 w-4 text-yellow-300">
                                            <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
                                        </svg>
                                    ))}
                                    {Array.from({
                                        length: 5 - review.rating,
                                    }).map((_) => (
                                        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 22 20" class="mr-1 h-4 w-4 text-gray-300">
                                            <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
                                        </svg>
                                    ))}
                                </div>
                            </div>
                        </div>
                    ))
                }
            </div>
        </section>
    </main>
</Base>

<!-- Add timeAgo to reviews based on user's locale -->
<script>
    import { getTimeAgo } from "@/utils/formatters";

    const reviews = document.querySelectorAll("p[data-datetime]") as NodeListOf<HTMLParagraphElement>;
    reviews.forEach((review) => {
        const datetime = review.dataset.datetime;

        if (datetime) {
            const timeAgo = getTimeAgo(datetime);
            review.textContent = timeAgo;
        }
    });
</script>
